<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	   default-lazy-init="true">
	<!-- 配置文件加载 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
		<property name="locations">
			<list>
				<value>classpath*:*.properties</value>
			</list>
		</property>
	</bean>
	<!--<tx:annotation-driven />-->
	<context:component-scan base-package="com.qbao.ai.resposity.dao"/>
	<!-- 配置数据库注解aop -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

<!--<tx:annotation-driven />-->
	<!--<context:component-scan base-package="com.qbao.ai.resposity.dao"/>-->

	<!-- 配置qbaochou数据源 只读 -->
	<bean id="aiDataSource" class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<constructor-arg ref="aiHikariConfig" />
	</bean>
	<bean id="aiHikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="jdbcUrl" value="${ai.datasource.url}" />
		<property name="username" value="${ai.datasource.username}" />
		<property name="password" value="${ai.datasource.password}" />
		<property name="minimumIdle" value="${datasource.min-idle}" />
		<property name="maximumPoolSize" value="${datasource.max-active}" />
		<property name="connectionInitSql" value="set names utf8" />
		<property name="dataSourceProperties">
			<props>
				<prop key="cachePrepStmts">true</prop>
				<prop key="prepStmtCacheSize">250</prop>
				<prop key="prepStmtCacheSqlLimit">2048</prop>
				<prop key="useServerPrepStmts">true</prop>
				<prop key="characterEncoding">utf8</prop>
				<prop key="useUnicode">true</prop>
			</props>
		</property>
	</bean>

	<!-- 配置qbao数据源 只读 -->
	<bean id="stuffDataSource" class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<constructor-arg ref="stuffHikariConfig" />
	</bean>
	<bean id="stuffHikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="jdbcUrl" value="${stuff.datasource.url}" />
		<property name="username" value="${stuff.datasource.username}" />
		<property name="password" value="${stuff.datasource.password}" />
		<property name="minimumIdle" value="${datasource.min-idle}" />
		<property name="maximumPoolSize" value="${datasource.max-active}" />
		<property name="connectionInitSql" value="set names utf8" />
		<property name="dataSourceProperties">
			<props>
				<prop key="cachePrepStmts">true</prop>
				<prop key="prepStmtCacheSize">250</prop>
				<prop key="prepStmtCacheSqlLimit">2048</prop>
				<prop key="useServerPrepStmts">true</prop>
				<prop key="characterEncoding">utf8</prop>
				<prop key="useUnicode">true</prop>
			</props>
		</property>
	</bean>
	<!-- 多数据源datasource -->
	<bean id="multipleDataSource" class="com.qbao.ai.resposity.mybatis.datasource.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="aiDataSource"/>
		<property name="targetDataSources">
			<map>
				<entry key="aiDataSource" value-ref="aiDataSource"/>
				<entry key="stuffDataSource" value-ref="stuffDataSource"/>
			</map>
		</property>
	</bean>

	<!--&lt;!&ndash; 配置数据库注解aop &ndash;&gt;-->
	<!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
	<!--<bean id="manyDataSourceAspect" class="com.qbao.ai.resposity.mybatis.datasource.DataSourceAspect" />-->
	<!--<aop:config>-->
		<!--<aop:aspect id="c" ref="manyDataSourceAspect">-->
			<!--<aop:pointcut id="tx" expression="execution(* com.qbao.ai.resposity.mybatis.dao.*.*(..))"/>-->
			<!--<aop:before pointcut-ref="tx" method="before"/>-->
		<!--</aop:aspect>-->
	<!--</aop:config>-->
	<!-- 配置数据库注解aop -->

	<!-- 配置sqlSessionFactory -->
	<bean id="multipleSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="multipleDataSource" />
		<property name="typeAliasesPackage" value="com.qbao.ai.resposity.mybatis.model" />
		<property name="mapperLocations" value="classpath*:mapping/*.xml" />
	</bean>
	<!-- 配置扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包以及它的子包下的所有映射接口类 -->
		<property name="basePackage" value="com.qbao.ai.resposity.mybatis.dao" />
		<property name="sqlSessionFactoryBeanName" value="multipleSqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="txManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource" />
	</bean>
	<!-- 采用@Transactional注解方式来使用事务 -->
	<tx:annotation-driven transaction-manager="txManager" />





</beans>

 
 